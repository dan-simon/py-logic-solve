from z3 import Solver, is_true
from lib import set_problem, deep_map, to_grid, at, inds, path, read_model, show_full_path, some_edge
import time

def parse(g):
    return deep_map(lambda x: bool('#.'.index(x)), to_grid(g), depth=2)

# OK this specific puzzle is pretty slow (~1 minute) but that's because it's huge.
g = parse('''
###.....####......####...###....#####.....###....#####..##.....#...#.......
#.......#...........#....##................#.............#.....#...#.#####.
#..##.....#...#......................#.....#..........#..##..###..##.......
....#....###..#...................####..#...........###............#....#..
....##.....#..#..##....##..............##......###..#.....#............####
.............##..##..#..#..#.......#..##...#...##.........#..#####.........
###....#..........#..#..#.###.#....#......###.........#..###..........#....
##...####............#..#..#..#...###.....#...#......##...............##..#
.............####....##.......###.....##......###....#..##....#####..##...#
..##.......#..#.......................##..###...#....#..#.................#
..#........#.............##........#..#.....#...........#.......#......#.##
..#.......##...#..#####.###.....####........#..###......#......###....##...
..#..##...#...###......................#........#...............#.....##...
....##..........#..##.......#..#....####.###....#...........#.......#.....#
....#..............#..##..####.#.........#.............##..####....###....#
.##...............##..#........##........#....#.....#...#............#....#
..#......#......#.....#.........#...##........##..###...#...#....#........#
..##....##......#.....#..#####.....##........##....#....#..###..###....#..#
.......##..#...##..##..........#....#.....##...............#......#..#.#...
....#......##..#...#...##......##........###.......####..............#.#...
..###......##.....##....##....##.....#........#....#....###....###...#.##..
....#..###............#..#........####.......###..........##..##....##.....
......##.......#....###....#.............##..#........#....................
###...........###.....#....####.........###.......#..##.....#..........###.
..#..#....#....#..............................#..###..#....###.........##..
..#..##..###......####..###.....##..........###...#...#.....#..............
....##....#..#.......#....##..###....#......#.............#.......#...#....
............###......................#...#.....###......####.##...#..##....
..#....#.....#..........###.#....#..###..#..#..#..............##..#..##....
###....#...........#......#.###..#.......#..#..#.#...##........#..##.......
#...#.###..###....###.#...#...#..##......#..#....##..##..###...............
....#......##......#..###.........#...#..#..#.#.##....#....##.###..........
....#.................#...#..####...###.....#.#................##..........
....##..###.....###.......#..#.......#........##..###..#..##............##.
..........#......#.......##................#..#.....#.##..##..##........#..
.....##...#......#........#.....#.........###.......#..##..#.###.......##..
.....###............#........#..#..........#..###..................#.......
...............#.####.#....###.##.............##......####....#..####......
##........#.####......###..#....#..#.....#...............#.####........####
#...#..####.......#.....#..........###..####....###....................#...
#..###...........###........####.....#............#..##.#......#...##......
#..#......#..#....#..........#....##..............#.##..###..###....###...#
........###..##...................#............#....#....#....#..........##
....###..#...#..##.........####..##...........###.....#..................##
....##.......#...##...........#.........#......#......#..............##....
..................#..###..........##...##............##....#....##....##...
..#......###..........##.##....#..###...#..#.........#....##...###....#..##
.###....##...............###..###.......#..##..#...........#..............#
..#........#..###....#........#....#..#...##..###...#......#.......#......#
......##...#...#...###....#.......###.#.........#..##........##....#......#
.......##..##..#....#....##........#..##...........#....#....###..###......
........#...#............#.............#..##..#....#..###..................
#........................#..#........#....##..#.........#..................
#.......##...#..............#........#.....#..###....##....#...............
#........##..#.......##....##........###...........###..####....#..........
##........#..#....#...###..#..##...............................####.......#
...#..#.....##..###............##........##...##.............#...........##
.###..###........#.......#......#..###..##.....##....##......#.....##....##
.#.....#......#........###...##.....##...#......#....#..#...###..###.......
............###..........#...#...#...................#..#...............#..
..###...#.....#..............#..##....##.............#..##....#........##..
..##...###..........###.#....#..#......#.....###........#.....#..#....##...
.......#...#....##..##..#..#....#......#...#..#...##..........#..##........
##.........#...###......#.###..........#..###.#....###.......##..#........#
##..##.....##......##...#..#................#....................#......###
#....###....#.....##....#.....#................#...........##.......##....#
..............#...#...........#......###......##...##......#...##..##......
...#......###.#..............##...#..#.......##...##...#..##..##....#..#...
..##...#....#.###.....#####..#....##.#............#....##......#.......#...
..#....#....#......................#.....##...........##...........#...#..#
..#...###..................#.......#..#...##......................###..##.#
...........#...#........#..###.......##....#....................#..#......#
#........###..##........#....#....#..##.........#....##........##........##
#.....#...#....#......#.###......##.....#....####...###...##...#......#....
###..####......#...####..........##.....####..............###..#...####....
''')

height = len(g)
width = len(g[0])
set_problem(g)
tm = time.time()

cons = []

# Create a path
c, link, _ = path(True, 'l')
cons += c

# Points are on the loop if and only if they aren't shaded in the given grid
cons += [some_edge(link, i) == at(g, i) for i in inds()]

t0 = time.time()
print('constructed', t0 - tm)
s = Solver()
s.add(*cons)
print(s.check())
print('done', time.time() - t0)
m = s.model()
print(show_full_path(deep_map(is_true, read_model(m, link)), blank='#'))
